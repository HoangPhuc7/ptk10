import streamlit as st
import pandas as pd
import os
import re

# üìÅ Th∆∞ m·ª•c ch·ª©a file Excel
DATA_FOLDER = "du_lieu_excel"

# üì• ƒê·ªçc t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ c√°c file Excel
@st.cache_data
def load_all_exam_data(folder_path):
    all_data = []

    for filename in os.listdir(folder_path):
        if filename.endswith(".xlsx") and not filename.startswith("~$"):
            subject = filename.replace(".xlsx", "")
            filepath = os.path.join(folder_path, filename)

            try:
                xls = pd.ExcelFile(filepath)
            except Exception as e:
                st.warning(f"L·ªói khi ƒë·ªçc file {filename}: {e}")
                continue

            for sheet_name in xls.sheet_names:
                df_raw = pd.read_excel(xls, sheet_name=sheet_name, header=None)

                # üîç T√¨m d√≤ng ch·ª©a "Ph√≤ng thi: ..."
                room_row = df_raw[df_raw.apply(lambda row: row.astype(str).str.contains("Ph√≤ng thi", na=False).any(), axis=1)]
                if not room_row.empty:
                    room_line_index = room_row.index[0]
                    room_text = room_row.values[0]
                    room_match = re.search(r'Ph√≤ng thi[:Ôºö]?\s*(\w+)', ' '.join(map(str, room_text)))
                    room = room_match.group(1) if room_match else "Kh√¥ng r√µ"
                    header_index = room_line_index + 2
                else:
                    room = "Kh√¥ng r√µ"
                    header_index = 0

                df = pd.read_excel(xls, sheet_name=sheet_name, skiprows=header_index)
                required_cols = ["H·ªç v√† t√™n", "L·ªõp"]

                if all(col in df.columns for col in required_cols):
                    df = df[required_cols].copy()
                    df["Ph√≤ng thi"] = room
                    df["M√¥n"] = subject
                    all_data.append(df)

    if all_data:
        return pd.concat(all_data, ignore_index=True)
    else:
        return pd.DataFrame(columns=["H·ªç v√† t√™n", "L·ªõp", "Ph√≤ng thi", "M√¥n"])

# üîç Tra c·ª©u theo t√™n v√† l·ªõp
def tra_cuu(data, ho_ten, lop):
    ho_ten = ho_ten.strip().lower()
    lop = lop.strip().lower()

    df = data.copy()
    df["H·ªç v√† t√™n"] = df["H·ªç v√† t√™n"].astype(str).str.strip().str.lower()
    df["L·ªõp"] = df["L·ªõp"].astype(str).str.strip().str.lower()
    
    ket_qua = df[(df["H·ªç v√† t√™n"] == ho_ten) & (df["L·ªõp"] == lop)]

    return ket_qua[["M√¥n", "Ph√≤ng thi"]] if not ket_qua.empty else None

# üñºÔ∏è Giao di·ªán ng∆∞·ªùi d√πng
#st.title("üìã Tra c·ª©u ph√≤ng thi theo h·ªç t√™n v√† l·ªõp")

ten = st.text_input("H·ªç v√† t√™n (Ch√∫ √Ω d·∫•u t√™n: Th√∫y,...)")
lop = st.text_input("L·ªõp (Vi·∫øt in hoa: 10A2)")

if st.button("T√¨m"):
    if not ten or not lop:
        st.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n v√† l·ªõp.")
    else:
        data = load_all_exam_data(DATA_FOLDER)
        result = tra_cuu(data, ten, lop)

        if result is None or result.empty:
            st.error("Kh√¥ng t√¨m th·∫•y.")
        else:
            st.success(f"K·∫øt qu·∫£ cho {ten} - {lop}:")
            st.dataframe(result)

